//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://www.RobertRisley.com/2008/01", ConfigurationName="IssuesContract")]
public interface IssuesContract
{
    
    // CODEGEN: Parameter 'GetIssuesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
    [System.ServiceModel.OperationContractAttribute(Action="GetIssues", ReplyAction="http://www.RobertRisley.com/2008/01/IssuesContract/GetIssuesResponse")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseResponse))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseRequest))]
    GetIssuesResponse1 GetIssues(GetIssuesRequest1 request);
    
    // CODEGEN: Parameter 'UpdateIssuesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
    [System.ServiceModel.OperationContractAttribute(Action="UpdateIssues", ReplyAction="http://www.RobertRisley.com/2008/01/IssuesContract/UpdateIssuesResponse")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseResponse))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseRequest))]
    UpdateIssuesResponse1 UpdateIssues(UpdateIssuesRequest1 request);
    
    // CODEGEN: Parameter 'GetPriorityTypeCodesResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
    [System.ServiceModel.OperationContractAttribute(Action="GetPriorityTypeCodes", ReplyAction="http://www.RobertRisley.com/2008/01/IssuesContract/GetPriorityTypeCodesResponse")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseResponse))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseRequest))]
    GetPriorityTypeCodesResponse GetPriorityTypeCodes(GetPriorityTypeCodesRequest request);
    
    // CODEGEN: Parameter 'GetDocumentsResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
    [System.ServiceModel.OperationContractAttribute(Action="GetDocuments", ReplyAction="http://www.RobertRisley.com/2008/01/IssuesContract/GetDocumentsResponse")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseResponse))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseRequest))]
    GetDocumentsResponse GetDocuments(GetDocumentsRequest request);
    
    // CODEGEN: Parameter 'PingResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
    [System.ServiceModel.OperationContractAttribute(Action="Ping", ReplyAction="http://www.RobertRisley.com/2008/01/IssuesContract/PingResponse")]
    [System.ServiceModel.XmlSerializerFormatAttribute()]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseResponse))]
    [System.ServiceModel.ServiceKnownTypeAttribute(typeof(BaseRequest))]
    PingResponse Ping(PingRequest request);
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class GetIssuesRequest : BaseRequest
{
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(UpdateIssuesRequest))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetIssuesRequest))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class BaseRequest
{
}

/// <remarks/>
[System.Xml.Serialization.XmlIncludeAttribute(typeof(UpdateIssuesResponse))]
[System.Xml.Serialization.XmlIncludeAttribute(typeof(GetIssuesResponse))]
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class BaseResponse
{
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class UpdateIssuesResponse : BaseResponse
{
    
    private IssuesCD _issuesCDField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
    public IssuesCD _issuesCD
    {
        get
        {
            return this._issuesCDField;
        }
        set
        {
            this._issuesCDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class GetIssuesResponse : BaseResponse
{
    
    private IssuesCD _issuesCDField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
    public IssuesCD _issuesCD
    {
        get
        {
            return this._issuesCDField;
        }
        set
        {
            this._issuesCDField = value;
        }
    }
}

/// <remarks/>
[System.CodeDom.Compiler.GeneratedCodeAttribute("svcutil", "3.0.4506.30")]
[System.SerializableAttribute()]
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/RWR.MessageContracts")]
public partial class UpdateIssuesRequest : BaseRequest
{
    
    private IssuesCD _issuesCDField;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
    public IssuesCD _issuesCD
    {
        get
        {
            return this._issuesCDField;
        }
        set
        {
            this._issuesCDField = value;
        }
    }
}

// This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRootAttribute("IssuesCD")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class IssuesCD : System.Data.DataSet
{
    
    private IssuesDataTable tableIssues;
    
    private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public IssuesCD()
    {
        this.BeginInit();
        this.InitClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected IssuesCD(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false)
    {
        if ((this.IsBinarySerialized(info, context) == true))
        {
            this.InitVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema))
        {
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            if ((ds.Tables["Issues"] != null))
            {
                base.Tables.Add(new IssuesDataTable(ds.Tables["Issues"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else
        {
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.Browsable(false)]
    [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
    public IssuesDataTable Issues
    {
        get
        {
            return this.tableIssues;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.BrowsableAttribute(true)]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override System.Data.SchemaSerializationMode SchemaSerializationMode
    {
        get
        {
            return this._schemaSerializationMode;
        }
        set
        {
            this._schemaSerializationMode = value;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataTableCollection Tables
    {
        get
        {
            return base.Tables;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new System.Data.DataRelationCollection Relations
    {
        get
        {
            return base.Relations;
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet()
    {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override System.Data.DataSet Clone()
    {
        IssuesCD cln = ((IssuesCD)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables()
    {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations()
    {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
    {
        if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema))
        {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Issues"] != null))
            {
                base.Tables.Add(new IssuesDataTable(ds.Tables["Issues"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else
        {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
    {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars()
    {
        this.InitVars(true);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable)
    {
        this.tableIssues = ((IssuesDataTable)(base.Tables["Issues"]));
        if ((initTable == true))
        {
            if ((this.tableIssues != null))
            {
                this.tableIssues.InitVars();
            }
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass()
    {
        this.DataSetName = "IssuesCD";
        this.Prefix = "";
        this.Namespace = "http://www.RobertRisley.com/IssuesCD.xsd";
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        this.tableIssues = new IssuesDataTable();
        base.Tables.Add(this.tableIssues);
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeIssues()
    {
        return false;
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
    {
        if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
        {
            this.InitVars();
        }
    }
    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
    {
        IssuesCD ds = new IssuesCD();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        xs.Add(ds.GetSchemaSerializable());
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        return type;
    }
    
    public delegate void IssuesRowChangeEventHandler(object sender, IssuesRowChangeEvent e);
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.Serializable()]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class IssuesDataTable : System.Data.DataTable, System.Collections.IEnumerable
    {
        
        private System.Data.DataColumn columnTaskId;
        
        private System.Data.DataColumn columnSubmitDt;
        
        private System.Data.DataColumn columnComponent;
        
        private System.Data.DataColumn columnShortDescription;
        
        private System.Data.DataColumn columnLongDescription;
        
        private System.Data.DataColumn columnDueDt;
        
        private System.Data.DataColumn columnVersion;
        
        private System.Data.DataColumn columnStartDt;
        
        private System.Data.DataColumn columnClosedDt;
        
        private System.Data.DataColumn columnResolution;
        
        private System.Data.DataColumn columnQAApprovedBy;
        
        private System.Data.DataColumn columnBusinessApprovedBy;
        
        private System.Data.DataColumn columnPrioritySequence;
        
        private System.Data.DataColumn columnStatus;
        
        private System.Data.DataColumn columnAssignedToName;
        
        private System.Data.DataColumn columnAssignedTo;
        
        private System.Data.DataColumn columnPriorityTypeCd;
        
        private System.Data.DataColumn columnPriority;
        
        private System.Data.DataColumn columnProject;
        
        private System.Data.DataColumn columnApprovedByName;
        
        private System.Data.DataColumn columnSubmittedBy;
        
        private static System.DateTime columnSubmitDt_defaultValue = System.DateTime.Parse("01/01/2007 00:00:00");
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesDataTable()
        {
            this.TableName = "Issues";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal IssuesDataTable(System.Data.DataTable table)
        {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive))
            {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString()))
            {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace))
            {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IssuesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context)
        {
            this.InitVars();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn TaskIdColumn
        {
            get
            {
                return this.columnTaskId;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn SubmitDtColumn
        {
            get
            {
                return this.columnSubmitDt;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ComponentColumn
        {
            get
            {
                return this.columnComponent;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ShortDescriptionColumn
        {
            get
            {
                return this.columnShortDescription;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn LongDescriptionColumn
        {
            get
            {
                return this.columnLongDescription;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn DueDtColumn
        {
            get
            {
                return this.columnDueDt;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn VersionColumn
        {
            get
            {
                return this.columnVersion;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn StartDtColumn
        {
            get
            {
                return this.columnStartDt;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ClosedDtColumn
        {
            get
            {
                return this.columnClosedDt;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ResolutionColumn
        {
            get
            {
                return this.columnResolution;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn QAApprovedByColumn
        {
            get
            {
                return this.columnQAApprovedBy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn BusinessApprovedByColumn
        {
            get
            {
                return this.columnBusinessApprovedBy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn PrioritySequenceColumn
        {
            get
            {
                return this.columnPrioritySequence;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn StatusColumn
        {
            get
            {
                return this.columnStatus;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn AssignedToNameColumn
        {
            get
            {
                return this.columnAssignedToName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn AssignedToColumn
        {
            get
            {
                return this.columnAssignedTo;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn PriorityTypeCdColumn
        {
            get
            {
                return this.columnPriorityTypeCd;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn PriorityColumn
        {
            get
            {
                return this.columnPriority;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ProjectColumn
        {
            get
            {
                return this.columnProject;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn ApprovedByNameColumn
        {
            get
            {
                return this.columnApprovedByName;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataColumn SubmittedByColumn
        {
            get
            {
                return this.columnSubmittedBy;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        public int Count
        {
            get
            {
                return this.Rows.Count;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRow this[int index]
        {
            get
            {
                return ((IssuesRow)(this.Rows[index]));
            }
        }
        
        public event IssuesRowChangeEventHandler IssuesRowChanging;
        
        public event IssuesRowChangeEventHandler IssuesRowChanged;
        
        public event IssuesRowChangeEventHandler IssuesRowDeleting;
        
        public event IssuesRowChangeEventHandler IssuesRowDeleted;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddIssuesRow(IssuesRow row)
        {
            this.Rows.Add(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRow AddIssuesRow(
                    int TaskId, 
                    System.DateTime SubmitDt, 
                    string Component, 
                    string ShortDescription, 
                    string LongDescription, 
                    System.DateTime DueDt, 
                    string Version, 
                    System.DateTime StartDt, 
                    System.DateTime ClosedDt, 
                    string Resolution, 
                    string QAApprovedBy, 
                    string BusinessApprovedBy, 
                    int PrioritySequence, 
                    string Status, 
                    string AssignedToName, 
                    string AssignedTo, 
                    short PriorityTypeCd, 
                    string Priority, 
                    string Project, 
                    string ApprovedByName, 
                    string SubmittedBy)
        {
            IssuesRow rowIssuesRow = ((IssuesRow)(this.NewRow()));
            rowIssuesRow.ItemArray = new object[] {
                    TaskId,
                    SubmitDt,
                    Component,
                    ShortDescription,
                    LongDescription,
                    DueDt,
                    Version,
                    StartDt,
                    ClosedDt,
                    Resolution,
                    QAApprovedBy,
                    BusinessApprovedBy,
                    PrioritySequence,
                    Status,
                    AssignedToName,
                    AssignedTo,
                    PriorityTypeCd,
                    Priority,
                    Project,
                    ApprovedByName,
                    SubmittedBy};
            this.Rows.Add(rowIssuesRow);
            return rowIssuesRow;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRow FindByTaskId(int TaskId)
        {
            return ((IssuesRow)(this.Rows.Find(new object[] {
                        TaskId})));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            return this.Rows.GetEnumerator();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataTable Clone()
        {
            IssuesDataTable cln = ((IssuesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataTable CreateInstance()
        {
            return new IssuesDataTable();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars()
        {
            this.columnTaskId = base.Columns["TaskId"];
            this.columnSubmitDt = base.Columns["SubmitDt"];
            this.columnComponent = base.Columns["Component"];
            this.columnShortDescription = base.Columns["ShortDescription"];
            this.columnLongDescription = base.Columns["LongDescription"];
            this.columnDueDt = base.Columns["DueDt"];
            this.columnVersion = base.Columns["Version"];
            this.columnStartDt = base.Columns["StartDt"];
            this.columnClosedDt = base.Columns["ClosedDt"];
            this.columnResolution = base.Columns["Resolution"];
            this.columnQAApprovedBy = base.Columns["QAApprovedBy"];
            this.columnBusinessApprovedBy = base.Columns["BusinessApprovedBy"];
            this.columnPrioritySequence = base.Columns["PrioritySequence"];
            this.columnStatus = base.Columns["Status"];
            this.columnAssignedToName = base.Columns["AssignedToName"];
            this.columnAssignedTo = base.Columns["AssignedTo"];
            this.columnPriorityTypeCd = base.Columns["PriorityTypeCd"];
            this.columnPriority = base.Columns["Priority"];
            this.columnProject = base.Columns["Project"];
            this.columnApprovedByName = base.Columns["ApprovedByName"];
            this.columnSubmittedBy = base.Columns["SubmittedBy"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass()
        {
            this.columnTaskId = new System.Data.DataColumn("TaskId", typeof(int), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnTaskId);
            this.columnSubmitDt = new System.Data.DataColumn("SubmitDt", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnSubmitDt);
            this.columnComponent = new System.Data.DataColumn("Component", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnComponent);
            this.columnShortDescription = new System.Data.DataColumn("ShortDescription", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnShortDescription);
            this.columnLongDescription = new System.Data.DataColumn("LongDescription", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnLongDescription);
            this.columnDueDt = new System.Data.DataColumn("DueDt", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnDueDt);
            this.columnVersion = new System.Data.DataColumn("Version", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnVersion);
            this.columnStartDt = new System.Data.DataColumn("StartDt", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnStartDt);
            this.columnClosedDt = new System.Data.DataColumn("ClosedDt", typeof(System.DateTime), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnClosedDt);
            this.columnResolution = new System.Data.DataColumn("Resolution", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnResolution);
            this.columnQAApprovedBy = new System.Data.DataColumn("QAApprovedBy", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnQAApprovedBy);
            this.columnBusinessApprovedBy = new System.Data.DataColumn("BusinessApprovedBy", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnBusinessApprovedBy);
            this.columnPrioritySequence = new System.Data.DataColumn("PrioritySequence", typeof(int), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnPrioritySequence);
            this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnStatus);
            this.columnAssignedToName = new System.Data.DataColumn("AssignedToName", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnAssignedToName);
            this.columnAssignedTo = new System.Data.DataColumn("AssignedTo", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnAssignedTo);
            this.columnPriorityTypeCd = new System.Data.DataColumn("PriorityTypeCd", typeof(short), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnPriorityTypeCd);
            this.columnPriority = new System.Data.DataColumn("Priority", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnPriority);
            this.columnProject = new System.Data.DataColumn("Project", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnProject);
            this.columnApprovedByName = new System.Data.DataColumn("ApprovedByName", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnApprovedByName);
            this.columnSubmittedBy = new System.Data.DataColumn("SubmittedBy", typeof(string), null, System.Data.MappingType.Element);
            base.Columns.Add(this.columnSubmittedBy);
            this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                            this.columnTaskId}, true));
            this.columnTaskId.AllowDBNull = false;
            this.columnTaskId.Unique = true;
            this.columnTaskId.DefaultValue = ((int)(0));
            this.columnSubmitDt.AllowDBNull = false;
            this.columnSubmitDt.DefaultValue = ((System.DateTime)(IssuesDataTable.columnSubmitDt_defaultValue));
            this.columnComponent.MaxLength = 50;
            this.columnShortDescription.AllowDBNull = false;
            this.columnShortDescription.DefaultValue = ((string)("Default Description"));
            this.columnShortDescription.MaxLength = 255;
            this.columnLongDescription.MaxLength = 1073741823;
            this.columnVersion.MaxLength = 15;
            this.columnResolution.MaxLength = 2000;
            this.columnQAApprovedBy.MaxLength = 15;
            this.columnBusinessApprovedBy.MaxLength = 15;
            this.columnStatus.MaxLength = 12;
            this.columnAssignedToName.Caption = "Assigned To";
            this.columnAssignedToName.MaxLength = 50;
            this.columnAssignedTo.MaxLength = 5;
            this.columnPriorityTypeCd.AllowDBNull = false;
            this.columnPriorityTypeCd.DefaultValue = ((short)(1));
            this.columnPriority.MaxLength = 12;
            this.columnProject.MaxLength = 25;
            this.columnApprovedByName.MaxLength = 50;
            this.columnSubmittedBy.AllowDBNull = false;
            this.columnSubmittedBy.DefaultValue = ((string)("Default User"));
            this.columnSubmittedBy.MaxLength = 50;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRow NewIssuesRow()
        {
            return ((IssuesRow)(this.NewRow()));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {
            return new IssuesRow(builder);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Type GetRowType()
        {
            return typeof(IssuesRow);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanged(e);
            if ((this.IssuesRowChanged != null))
            {
                this.IssuesRowChanged(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowChanging(e);
            if ((this.IssuesRowChanging != null))
            {
                this.IssuesRowChanging(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleted(e);
            if ((this.IssuesRowDeleted != null))
            {
                this.IssuesRowDeleted(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
        {
            base.OnRowDeleting(e);
            if ((this.IssuesRowDeleting != null))
            {
                this.IssuesRowDeleting(this, new IssuesRowChangeEvent(((IssuesRow)(e.Row)), e.Action));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveIssuesRow(IssuesRow row)
        {
            this.Rows.Remove(row);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            IssuesCD ds = new IssuesCD();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "IssuesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            return type;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class IssuesRow : System.Data.DataRow
    {
        
        private IssuesDataTable tableIssues;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal IssuesRow(System.Data.DataRowBuilder rb) : 
                base(rb)
        {
            this.tableIssues = ((IssuesDataTable)(this.Table));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int TaskId
        {
            get
            {
                return ((int)(this[this.tableIssues.TaskIdColumn]));
            }
            set
            {
                this[this.tableIssues.TaskIdColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime SubmitDt
        {
            get
            {
                return ((System.DateTime)(this[this.tableIssues.SubmitDtColumn]));
            }
            set
            {
                this[this.tableIssues.SubmitDtColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Component
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.ComponentColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Component\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.ComponentColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ShortDescription
        {
            get
            {
                return ((string)(this[this.tableIssues.ShortDescriptionColumn]));
            }
            set
            {
                this[this.tableIssues.ShortDescriptionColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string LongDescription
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.LongDescriptionColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'LongDescription\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.LongDescriptionColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime DueDt
        {
            get
            {
                try
                {
                    return ((System.DateTime)(this[this.tableIssues.DueDtColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'DueDt\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.DueDtColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Version
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.VersionColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Version\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.VersionColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime StartDt
        {
            get
            {
                try
                {
                    return ((System.DateTime)(this[this.tableIssues.StartDtColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'StartDt\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.StartDtColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.DateTime ClosedDt
        {
            get
            {
                try
                {
                    return ((System.DateTime)(this[this.tableIssues.ClosedDtColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'ClosedDt\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.ClosedDtColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Resolution
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.ResolutionColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Resolution\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.ResolutionColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string QAApprovedBy
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.QAApprovedByColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'QAApprovedBy\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.QAApprovedByColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string BusinessApprovedBy
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.BusinessApprovedByColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'BusinessApprovedBy\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.BusinessApprovedByColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int PrioritySequence
        {
            get
            {
                try
                {
                    return ((int)(this[this.tableIssues.PrioritySequenceColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'PrioritySequence\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.PrioritySequenceColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Status
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.StatusColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Status\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.StatusColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AssignedToName
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.AssignedToNameColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'AssignedToName\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.AssignedToNameColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AssignedTo
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.AssignedToColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'AssignedTo\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.AssignedToColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public short PriorityTypeCd
        {
            get
            {
                return ((short)(this[this.tableIssues.PriorityTypeCdColumn]));
            }
            set
            {
                this[this.tableIssues.PriorityTypeCdColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Priority
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.PriorityColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Priority\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.PriorityColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Project
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.ProjectColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'Project\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.ProjectColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string ApprovedByName
        {
            get
            {
                try
                {
                    return ((string)(this[this.tableIssues.ApprovedByNameColumn]));
                }
                catch (System.InvalidCastException e)
                {
                    throw new System.Data.StrongTypingException("The value for column \'ApprovedByName\' in table \'Issues\' is DBNull.", e);
                }
            }
            set
            {
                this[this.tableIssues.ApprovedByNameColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SubmittedBy
        {
            get
            {
                return ((string)(this[this.tableIssues.SubmittedByColumn]));
            }
            set
            {
                this[this.tableIssues.SubmittedByColumn] = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsComponentNull()
        {
            return this.IsNull(this.tableIssues.ComponentColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetComponentNull()
        {
            this[this.tableIssues.ComponentColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsLongDescriptionNull()
        {
            return this.IsNull(this.tableIssues.LongDescriptionColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetLongDescriptionNull()
        {
            this[this.tableIssues.LongDescriptionColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDueDtNull()
        {
            return this.IsNull(this.tableIssues.DueDtColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDueDtNull()
        {
            this[this.tableIssues.DueDtColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsVersionNull()
        {
            return this.IsNull(this.tableIssues.VersionColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetVersionNull()
        {
            this[this.tableIssues.VersionColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsStartDtNull()
        {
            return this.IsNull(this.tableIssues.StartDtColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetStartDtNull()
        {
            this[this.tableIssues.StartDtColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsClosedDtNull()
        {
            return this.IsNull(this.tableIssues.ClosedDtColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetClosedDtNull()
        {
            this[this.tableIssues.ClosedDtColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsResolutionNull()
        {
            return this.IsNull(this.tableIssues.ResolutionColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetResolutionNull()
        {
            this[this.tableIssues.ResolutionColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsQAApprovedByNull()
        {
            return this.IsNull(this.tableIssues.QAApprovedByColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetQAApprovedByNull()
        {
            this[this.tableIssues.QAApprovedByColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsBusinessApprovedByNull()
        {
            return this.IsNull(this.tableIssues.BusinessApprovedByColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetBusinessApprovedByNull()
        {
            this[this.tableIssues.BusinessApprovedByColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPrioritySequenceNull()
        {
            return this.IsNull(this.tableIssues.PrioritySequenceColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPrioritySequenceNull()
        {
            this[this.tableIssues.PrioritySequenceColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsStatusNull()
        {
            return this.IsNull(this.tableIssues.StatusColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetStatusNull()
        {
            this[this.tableIssues.StatusColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAssignedToNameNull()
        {
            return this.IsNull(this.tableIssues.AssignedToNameColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAssignedToNameNull()
        {
            this[this.tableIssues.AssignedToNameColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsAssignedToNull()
        {
            return this.IsNull(this.tableIssues.AssignedToColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetAssignedToNull()
        {
            this[this.tableIssues.AssignedToColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsPriorityNull()
        {
            return this.IsNull(this.tableIssues.PriorityColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetPriorityNull()
        {
            this[this.tableIssues.PriorityColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsProjectNull()
        {
            return this.IsNull(this.tableIssues.ProjectColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetProjectNull()
        {
            this[this.tableIssues.ProjectColumn] = System.Convert.DBNull;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsApprovedByNameNull()
        {
            return this.IsNull(this.tableIssues.ApprovedByNameColumn);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetApprovedByNameNull()
        {
            this[this.tableIssues.ApprovedByNameColumn] = System.Convert.DBNull;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class IssuesRowChangeEvent : System.EventArgs
    {
        
        private IssuesRow eventRow;
        
        private System.Data.DataRowAction eventAction;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRowChangeEvent(IssuesRow row, System.Data.DataRowAction action)
        {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IssuesRow Row
        {
            get
            {
                return this.eventRow;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Data.DataRowAction Action
        {
            get
            {
                return this.eventAction;
            }
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetIssues", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetIssuesRequest1
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public GetIssuesRequest request;
    
    public GetIssuesRequest1()
    {
    }
    
    public GetIssuesRequest1(GetIssuesRequest request)
    {
        this.request = request;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetIssuesResponse", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetIssuesResponse1
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public GetIssuesResponse GetIssuesResult;
    
    public GetIssuesResponse1()
    {
    }
    
    public GetIssuesResponse1(GetIssuesResponse GetIssuesResult)
    {
        this.GetIssuesResult = GetIssuesResult;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="UpdateIssues", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class UpdateIssuesRequest1
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public UpdateIssuesRequest request;
    
    public UpdateIssuesRequest1()
    {
    }
    
    public UpdateIssuesRequest1(UpdateIssuesRequest request)
    {
        this.request = request;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="UpdateIssuesResponse", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class UpdateIssuesResponse1
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public UpdateIssuesResponse UpdateIssuesResult;
    
    public UpdateIssuesResponse1()
    {
    }
    
    public UpdateIssuesResponse1(UpdateIssuesResponse UpdateIssuesResult)
    {
        this.UpdateIssuesResult = UpdateIssuesResult;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetPriorityTypeCodes", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetPriorityTypeCodesRequest
{
    
    public GetPriorityTypeCodesRequest()
    {
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetPriorityTypeCodesResponse", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetPriorityTypeCodesResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Data.DataSet GetPriorityTypeCodesResult;
    
    public GetPriorityTypeCodesResponse()
    {
    }
    
    public GetPriorityTypeCodesResponse(System.Data.DataSet GetPriorityTypeCodesResult)
    {
        this.GetPriorityTypeCodesResult = GetPriorityTypeCodesResult;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetDocuments", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetDocumentsRequest
{
    
    public GetDocumentsRequest()
    {
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetDocumentsResponse", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class GetDocumentsResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public System.Data.DataSet GetDocumentsResult;
    
    public GetDocumentsResponse()
    {
    }
    
    public GetDocumentsResponse(System.Data.DataSet GetDocumentsResult)
    {
        this.GetDocumentsResult = GetDocumentsResult;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="Ping", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class PingRequest
{
    
    public PingRequest()
    {
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="PingResponse", WrapperNamespace="http://www.RobertRisley.com/2008/01", IsWrapped=true)]
public partial class PingResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.RobertRisley.com/2008/01", Order=0)]
    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
    public string PingResult;
    
    public PingResponse()
    {
    }
    
    public PingResponse(string PingResult)
    {
        this.PingResult = PingResult;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IssuesContractChannel : IssuesContract, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class IssuesContractClient : System.ServiceModel.ClientBase<IssuesContract>, IssuesContract
{
    
    public IssuesContractClient()
    {
    }
    
    public IssuesContractClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public IssuesContractClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public IssuesContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public IssuesContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    GetIssuesResponse1 IssuesContract.GetIssues(GetIssuesRequest1 request)
    {
        return base.Channel.GetIssues(request);
    }
    
    public GetIssuesResponse GetIssues(GetIssuesRequest request)
    {
        GetIssuesRequest1 inValue = new GetIssuesRequest1();
        inValue.request = request;
        GetIssuesResponse1 retVal = ((IssuesContract)(this)).GetIssues(inValue);
        return retVal.GetIssuesResult;
    }
    
    UpdateIssuesResponse1 IssuesContract.UpdateIssues(UpdateIssuesRequest1 request)
    {
        return base.Channel.UpdateIssues(request);
    }
    
    public UpdateIssuesResponse UpdateIssues(UpdateIssuesRequest request)
    {
        UpdateIssuesRequest1 inValue = new UpdateIssuesRequest1();
        inValue.request = request;
        UpdateIssuesResponse1 retVal = ((IssuesContract)(this)).UpdateIssues(inValue);
        return retVal.UpdateIssuesResult;
    }
    
    GetPriorityTypeCodesResponse IssuesContract.GetPriorityTypeCodes(GetPriorityTypeCodesRequest request)
    {
        return base.Channel.GetPriorityTypeCodes(request);
    }
    
    public System.Data.DataSet GetPriorityTypeCodes()
    {
        GetPriorityTypeCodesRequest inValue = new GetPriorityTypeCodesRequest();
        GetPriorityTypeCodesResponse retVal = ((IssuesContract)(this)).GetPriorityTypeCodes(inValue);
        return retVal.GetPriorityTypeCodesResult;
    }
    
    GetDocumentsResponse IssuesContract.GetDocuments(GetDocumentsRequest request)
    {
        return base.Channel.GetDocuments(request);
    }
    
    public System.Data.DataSet GetDocuments()
    {
        GetDocumentsRequest inValue = new GetDocumentsRequest();
        GetDocumentsResponse retVal = ((IssuesContract)(this)).GetDocuments(inValue);
        return retVal.GetDocumentsResult;
    }
    
    PingResponse IssuesContract.Ping(PingRequest request)
    {
        return base.Channel.Ping(request);
    }
    
    public string Ping()
    {
        PingRequest inValue = new PingRequest();
        PingResponse retVal = ((IssuesContract)(this)).Ping(inValue);
        return retVal.PingResult;
    }
}
